{"version":3,"sources":["../src/index.js"],"names":["gridClass","size","HTMLRow","cells","className","hasInlineChildren","map","c","id","noop","HTMLCell","props","rows","layout","content","hasInlineNeighbour","inline","cn","plugin","state","Component","r","StaticComponent","Renderer","length","HTMLRenderer","plugins","service","unserialize","type"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport React from 'react'\nimport classNames from 'classnames'\nimport PluginService from 'ory-editor-core/lib/service/plugin'\nimport { editable as reducer } from 'ory-editor-core/lib/reducer/editable'\nimport type { Cell, Row } from 'ory-editor-core/lib/types/editable'\n\nconst gridClass = (size: number = 12): string =>\n  `ory-cell-sm-${size} ory-cell-xs-12`\n\nconst HTMLRow = ({ cells = [], className, hasInlineChildren }: Row) =>\n  <div\n    className={classNames('ory-row', className, {\n      'ory-row-has-floating-children': hasInlineChildren\n    })}\n  >\n    {cells.map((c: Cell) => <HTMLCell key={c.id} {...c} />)}\n  </div>\n\n// eslint-disable-next-line no-empty-function\nconst noop = () => {}\n\nconst HTMLCell = (props: Cell) => {\n  const {\n    rows = [],\n    layout = {},\n    content = {},\n    hasInlineNeighbour,\n    inline,\n    size\n  } = props\n  const cn = classNames('ory-cell', gridClass(size), {\n    'ory-cell-has-inline-neighbour': hasInlineNeighbour,\n    [`ory-cell-inline-${inline || ''}`]: inline\n  })\n\n  if (layout.plugin) {\n    const { state, plugin: { Component } } = layout\n\n    return (\n      <div className={cn}>\n        <div className=\"ory-cell-inner\">\n          <Component isPreviewMode readOnly state={state} onChange={noop}>\n            {rows.map((r: Row) =>\n              <HTMLRow key={r.id} {...r} className=\"ory-cell-inner\" />\n            )}\n          </Component>\n        </div>\n      </div>\n    )\n  } else if (content.plugin) {\n    const { state, plugin: { Component, StaticComponent } } = content\n    const Renderer = StaticComponent || Component\n\n    return (\n      <div className={cn}>\n        <div className=\"ory-cell-inner ory-cell-leaf\">\n          <Renderer isPreviewMode readOnly state={state} onChange={noop} />\n        </div>\n      </div>\n    )\n  } else if (rows.length > 0) {\n    return (\n      <div className={cn}>\n        {rows.map((r: Row) =>\n          <HTMLRow key={r.id} {...r} className=\"ory-cell-inner\" />\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn}>\n      <div className=\"ory-cell-inner\" />\n    </div>\n  )\n}\n\nexport const HTMLRenderer = ({\n  state,\n  plugins\n}: {\n  state: any,\n  plugins: { layout: [], content: [] }\n}) => {\n  const service = new PluginService(plugins)\n  const props = reducer(service.unserialize(state), { type: 'renderer/noop' })\n\n  return <HTMLRow {...props} />\n}\n"]}